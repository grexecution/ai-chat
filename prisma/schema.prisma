datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  emailVerified DateTime?
  passwordHash  String
  name          String?
  image         String?
  role          String         @default("user") // "user" or "superuser"
  createdAt     DateTime       @default(now())
  accounts      Account[]
  sessions      Session[]
  conversations Conversation[]
  folders       Folder[]
  Usage         Usage[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// App models
model Folder {
  id            String         @id @default(cuid())
  userId        String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  name          String
  color         String?        // Hex color code
  icon          String?        // Emoji or icon identifier
  position      Int            @default(0) // For ordering folders
  isExpanded    Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  conversations Conversation[]

  @@unique([userId, position])
}

model Conversation {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  folderId  String?   // Optional folder assignment
  folder    Folder?   @relation(fields: [folderId], references: [id], onDelete: SetNull)
  title     String
  model     String    // e.g., 'llama3.1:8b'
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages  Message[]
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  role           String       // 'user' | 'assistant'
  content        String
  createdAt      DateTime     @default(now())
}

model Usage {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  month     String   // e.g., '2025-08'
  messages  Int      @default(0)
  tokensIn  Int      @default(0)
  tokensOut Int      @default(0)
  updatedAt DateTime @updatedAt

  @@unique([userId, month])
}